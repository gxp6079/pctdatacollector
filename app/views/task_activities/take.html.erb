<div id="file_example_names" data-files="<%=h @files.collect{|f| f.name.split('.').first() + "-#{f.id}"} %>"></div>
<div id="task_progress_id" data-taskprogressid="<%= @task_progress.id %>"></div>
<div id="taskid" data-taskid="<%= @task_progress.task.id %>"></div>
<div id="systemid" data-systemid="<%= @task_progress.task.system_example.id %>"></div>
<div id="userid" data-userid="<%= current_user.id %>"></div>
<div id="timetrackable" data-timetrackable="<%= current_user.is_time_trackable %>"></div>
<div id="isintrining" data-isintrining="<%= current_user.is_in_training %>"></div>

<div id="content">
  <div class="tv-tabs">
    <label for="tv-tab-1" class="tv-tab">Source Code</label>
    <label for="tv-tab-2" class="tv-tab">Question|Answer</label>
  </div>
</div>


  <% if current_user.has_role? :admin %>
  <div id="console">
    <ul>
      <% @files.each do |file_example| %>
        <li data-time="0" data-field=<%= "data-" + file_example.name.split('.').first() + "-#{file_example.id}" %>>
          <%= file_example.name.split('.').first() %>: <span>0</span>s
        </li>
      <% end %>
    </ul>
  </div>
  <% end %>

  <div id="srcmenu">
    <ul>
      <% @files.each do |file_example| %>
        <li><a class="sourcecode" href=<%= "#" + file_example.name.split('.').first() + "-#{file_example.id}" %> id=<%= file_example.name.split('.').first() + "-#{file_example.id}" %>>
          <%= file_example.name %>
        </a></li>
      <% end %>
      <li><a></a></li>
      <li><a></a></li>
      <li><p>
        <%= link_to "Back",
                    {:controller => "task_activities", :action => "system_description",
                    :system => @system_randomly_selected }, {:id => "back-link" }
        %>
      </p></li>
    </ul>
  </div>

<div id="content">
  <input id="tv-tab-1" name="tv-group" type="radio" class="tv-radio"/>
  <div class="tv-content">
    <% @files.each do |file_example| %>
      <div id=<%= "data-" + file_example.name.split('.').first() + "-#{file_example.id}"%> class="field">
        <pre class="line-numbers"><code class="language-java">
<%= file_example.code %>
        </code></pre>
      </div>
    <% end %>
  </div>
</div>

<div id="content">
  <input id="tv-tab-2" name="tv-group" type="radio" class="tv-radio"/>
  <div class="tv-content">
    <div class="question">
      <h3>System: <%= @task_progress.system_example.name %></h3>
      <h2>Task: <%= @task_progress.task.name %></h2>

      <% match = @task_progress.task.description.match(/<#{current_user.group}>(.+)<\/#{current_user.group}>/m)
         if match.nil? %>
          <p><%= @task_progress.task.description %></p>
      <% else %>
          <p><%= match[1] %></p>
      <% end %>

      <% match = @task_progress.task.html_question.match(/<#{current_user.group}>(.+)<\/#{current_user.group}>/m)
         if match.nil? %>
          <p><%= @task_progress.task.html_question.html_safe %></p>
      <% else %>
          <p><%= match[1].html_safe %></p>
      <% end %>

      <p class="buttons">
         <%= link_to "Submit answer", '#', class: "button", :onclick => "parseAndSendAnswer(); return false" %>
      </p>

      <div align="center">
        <p><u>Note</u>: you must read the code by selecting files from the left-side menu before submitting each answer.</p>
      </div>

    </div>
  </div>
</div>

<!--  -->
<script>

$(".field").hide();
$("#tv-tab-2").prop('checked', true);

var taskid = $("#taskid").data("taskid");
var systemid = $("#systemid").data("systemid");
var userid = $("#userid").data("userid");
var timetrackable = $("#timetrackable").data("timetrackable");
var isintrining = $("#isintrining").data("isintrining");

var datafields = { fields: []};
var jfiles=$("#file_example_names").data("files");

var current_file = "cur";
var clicked_file = "clk";
var totalTime = 0;
var interval = 1000;
var should_count_time = false;

setInterval(moveTime, interval);

function moveTime() {
  if(should_count_time == true) {
    totalTime++;
    console.log(new Date());
    var $elem = $('#console li[data-field="data-' + current_file + '"]');
    $elem.find('span').html(totalTime);
  }
}

// Files list
$(".sourcecode").click(function() {
  should_count_time = true;
  clicked_file = this.id;
  sendPost();
  current_file = this.id;

  $("#tv-tab-1").prop('checked', true);
  $(".field").hide();
  $(".sourcecode").removeClass("active");
  $("#data-" + this.id).show();
  $(this).addClass("active");
});

// Back link
$("#back-link").click(function() {
  should_count_time = false;
  clicked_file = "back";
  sendPost();
});

// Question tab
$("#tv-tab-2").click(function() {
  should_count_time = false;
  clicked_file = "question-tab";
  sendPost();
});

// Source tab
$("#tv-tab-1").click(function() {
  should_count_time = true;
  clicked_file = current_file;
  sendPost();
});

function sendPost() {
  var d = new Date();
  local_timestamp = d.getFullYear() + "-" + ("00" + (d.getMonth() + 1)).slice(-2) + "-" +  ("00" + d.getDate()).slice(-2) + " " +
                    ("00" + d.getHours()).slice(-2) + ":" + ("00" + d.getMinutes()).slice(-2) + ":" + ("00" + d.getSeconds()).slice(-2) + "." + d.getMilliseconds();

  if(totalTime >= 1 && current_file != clicked_file) {
    if(timetrackable && !isintrining) {
      $.post('/permanence_times', { permanence_time: { task_id: taskid, system_example_id: systemid, user_id: userid, file_example_id: current_file.replace(/^\w+-/g, ''), seconds: totalTime, local_timestamp: local_timestamp } } );
      console.log("{ task_id: " + taskid + ", system_example_id: " + systemid + ", user_id: " + userid + ", file_example_id: " + current_file.replace(/^\w+-/g, '') + ", seconds: " + totalTime + ", local_timestamp: " + local_timestamp + "}");
    }
    totalTime = 0;
  }
}

function parseAndSendAnswer() {
  var answer = [];
  var task_progress_id = $("#task_progress_id").data("taskprogressid");
  var row = $("#answermaxrow").data("answermaxrow");
  var col = $("#answermaxcol").data("answermaxcol");
  var row_answer;

  for (i = 1; i <= row; i++) {
    row_answer = [];
    for (j = 1; j <= col; j++) {
      row_answer.push(returnValue($('#a' + i + '_' + j)));
     }
     answer.push(row_answer);
  }

  if(have_unanswered_questions(answer)) {
    alert("You have some unanswered questions. Please, choose some of the available options regarding the understandability of the code.");
  } else {
    if (confirm('Please, confirm your answer submission.')) {
      $.post('/task_activities/finish', { answer: JSON.stringify(answer), task_progress_id: task_progress_id } )
    }
  }
}

function have_unanswered_questions(answer) {
  var retval = false;
  for(var i = 0; i < answer.length; i++) {
    if(answer[i][0] == "unanswered") {
      retval = true;
      break;
    }
  }
  return retval;
}

function returnValue(element) {
  // element can be a checkbox or an input
  var retval;
  if(element.is(':checkbox')) {
    retval = element.is(":checked");
  } else if (element.is(':input')) {
    retval = element.val();
  }
  return retval;
}

$(window).focus(function() {
  if(current_file == clicked_file) {
    should_count_time = true;
  }
});

$(window).blur(function() {
  var aux = clicked_file;
  clicked_file = "blurred";
  sendPost();
  clicked_file = aux;
  should_count_time = false;
});

</script>
