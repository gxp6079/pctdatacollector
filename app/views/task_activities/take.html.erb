<div id="file_example_names" data-files="<%=h @files.collect{|f| f.name.split('.').first() + "-#{f.id}"} %>"></div>
<div id="task_progress_id" data-taskprogressid="<%= @task_progress.id %>"></div>
<div id="taskid" data-taskid="<%= @task_progress.task.id %>"></div>
<div id="systemid" data-systemid="<%= @task_progress.task.system_example.id %>"></div>
<div id="userid" data-userid="<%= current_user.id %>"></div>
<div id="timetrackable" data-timetrackable="<%= current_user.is_time_trackable %>"></div>
<div id="isintraining" data-isintraining="<%= current_user.is_in_training %>"></div>

<div class="content">
</div>

  <div id="srcmenu">
    <ul>
      <li><a>
        <div class="tv-tabs">
          <label for="tv-tab-2" class="tv-tab">Question|Answer</label>
        </div>
      </a></li>

      <% @files.each do |file_example| %>
        <li><a class="sourcecode" href=<%= "#" + file_example.name.split('.').first() + "-#{file_example.id}" %> id=<%= file_example.name.split('.').first() + "-#{file_example.id}" %>>
          <%= file_example.name %>
        </a></li>
      <% end %>
      <li><a></a></li>
      <li><a></a></li>
      <li><p>
        <%= link_to "Back",
                    {:controller => "task_activities", :action => "system_description",
                    :system => @system_randomly_selected }, {:id => "back-link" }
        %>
      </p></li>
    </ul>
  </div>

<div class="content">
  <input id="tv-tab-1" name="tv-group" type="radio" class="tv-radio"/>
  <div class="tv-content">
    <% @files.each do |file_example| %>
      <div id=<%= "data-" + file_example.name.split('.').first() + "-#{file_example.id}"%> class="field">
        <pre class="line-numbers"><code class="language-java">
<%= file_example.code %>
        </code></pre>
      </div>
    <% end %>
  </div>
</div>

<div class="content">
  <input id="tv-tab-2" name="tv-group" type="radio" class="tv-radio"/>
  <div class="tv-content">
    <div class="question">
      <h3>System: <%= @task_progress.system_example.name %></h3>
      <h2>Task: <%= @task_progress.task.name %></h2>

      <% match = @task_progress.task.description.match(/<#{current_user.group}>(.+)<\/#{current_user.group}>/m)
         if match.nil? %>
          <p><%= @task_progress.task.description %></p>
      <% else %>
          <p><%= match[1] %></p>
      <% end %>

      <% match = @task_progress.task.html_question.match(/<#{current_user.group}>(.+)<\/#{current_user.group}>/m)
         if match.nil? %>
          <p><%= @task_progress.task.html_question.html_safe %></p>
      <% else %>
          <p><%= match[1].html_safe %></p>
      <% end %>

      <p class="buttons">
         <%= link_to "Submit answer", '#', class: "button", :onclick => "parseAndSendAnswer(); return false" %>
      </p>

      <div align="center">
        <p><u>Note</u>: you must read the code by selecting files from the left-side menu before submitting each answer.</p>
      </div>

    </div>
  </div>
</div>

<!--  -->
<script>

// Disable back button
history.pushState(null, document.title, location.href);
window.addEventListener('popstate', function (event)
{
  history.pushState(null, document.title, location.href);
});

$(document).ready( function(){ $(".field").hide(); $(".button").hide(); } );

$(".field").hide();
$("#tv-tab-2").prop('checked', true);

var taskid = $("#taskid").data("taskid");
var systemid = $("#systemid").data("systemid");
var userid = $("#userid").data("userid");
var timetrackable = $("#timetrackable").data("timetrackable");
var isintraining = $("#isintraining").data("isintraining");

var start_timestamp;
var click;
var old_file = null;
var current_file = null;

var scroll_position = {};
// Files list
$(".sourcecode").click(function() {
  var old_click = click;
  click = "files";
  current_file = this.id;
  if((current_file != old_file) || old_click == "question") {
    sendPost();
    start_timestamp = new Date();
  }
  old_file = current_file;

  $(".button").show();
  $("#tv-tab-1").prop('checked', true);
  $(".field").hide();
  $(".sourcecode").removeClass("active");
  $("#data-" + this.id).show();
  $(this).addClass("active");

  if(scroll_position[current_file] === undefined) { scroll_position[current_file] = 0; }
  $(window).scrollTop(scroll_position[current_file]);
});

// Back link
$("#back-link").click(function() {
  if(click == "files") {
    sendPost();
  }
  window.onbeforeunload = null;
});

$(window).scroll(function() {
  scroll_position[current_file] = $(window).scrollTop();
});

// Question tab
$("#tv-tab-2").click(function() {
  current_file = null;
  click = "question";
  sendPost();
  start_timestamp = null;
});

function sendPost() {
  var d = new Date();
  local_timestamp = d.getFullYear() + "-" + ("00" + (d.getMonth() + 1)).slice(-2) + "-" +  ("00" + d.getDate()).slice(-2) + " " +
                    ("00" + d.getHours()).slice(-2) + ":" + ("00" + d.getMinutes()).slice(-2) + ":" + ("00" + d.getSeconds()).slice(-2) + "." + d.getMilliseconds();

  var end_timestamp = new Date();
  totalTime = Math.round((end_timestamp - start_timestamp) / 100);
  if(totalTime >= 4 && start_timestamp != null) {
    if(timetrackable && !isintraining) {
      $.post('/permanence_times', { permanence_time: { task_id: taskid, system_example_id: systemid, user_id: userid, file_example_id: old_file.replace(/^\w+-/g, ''), seconds: totalTime, local_timestamp: local_timestamp } } );
      //console.log("{ task_id: " + taskid + ", system_example_id: " + systemid + ", user_id: " + userid + ", file_example_id: " + old_file.replace(/^\w+-/g, '') + ", seconds: " + totalTime + ", local_timestamp: " + local_timestamp + "}");
    }
  }
}

function parseAndSendAnswer() {
  var answer = [];
  var task_progress_id = $("#task_progress_id").data("taskprogressid");
  var row = $("#answermaxrow").data("answermaxrow");
  var col = $("#answermaxcol").data("answermaxcol");
  var row_answer;

  for (i = 1; i <= row; i++) {
    row_answer = [];
    for (j = 1; j <= col; j++) {
      row_answer.push(returnValue($('#a' + i + '_' + j)));
     }
     answer.push(row_answer);
  }

  if(have_unanswered_questions(answer)) {
    alert("You have some unanswered questions. Please, choose some of the available options regarding the understandability of the code.");
  } else {
    if (confirm('Please, confirm your answer submission.')) {
      $.post('/task_activities/finish', { answer: JSON.stringify(answer), task_progress_id: task_progress_id } );
      window.onbeforeunload = null;
    }
  }
}

function have_unanswered_questions(answer) {
  var retval = false;
  for(var i = 0; i < answer.length; i++) {
    if(answer[i][0] == "unanswered") {
      retval = true;
      break;
    }
  }
  return retval;
}

function returnValue(element) {
  // element can be a checkbox or an input
  var retval;
  if(element.is(':checkbox')) {
    retval = element.is(":checked");
  } else if (element.is(':input')) {
    retval = element.val();
  }
  return retval;
}

// Windows events
$(window).focus(function() {
  if(click == "files") {
    start_timestamp = new Date();
  }
  $(".line-numbers" ).removeClass("blur");
});

// window.blur = function() {
$(window).blur(function() {
  if(click == "files") {
    sendPost();
    start_timestamp = null;
  }
  $(".line-numbers" ).addClass( "blur");
});

window.onbeforeunload = function() {
  $(".line-numbers" ).addClass( "blur");
  if(click == "files") {
    sendPost();
    start_timestamp = null;
  }
  return false;
}

</script>
